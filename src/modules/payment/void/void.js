

const TransRequestJson = require("../../../resources/aurus/TransRequest.json");
/*  Field Identifiers and Structure of TransRequest

		//This is a 20 alphanumeric field which has Source POS ID data for the current transaction.
		POSID: "01",
		//This is a 10 alphanumeric field which has Application ID running on tablet data for the current
		APPID: "04",
		//This is a 25 alphanumeric field which has Destination CCT ID data for the current transaction.
		CCTID: "06",
		//This is a 20 character alphanumeric field which contains the information about Payment Card
		KI: "711843530058",
		//This is a 2 character alphanumeric field which contains the information about Payment Card Identifier Type.
		KIType: "71",
		//This is a 16 character Alpha Numeric field which contains a Card Token.CCT will pass first 2 & last 4 the card# in case of PLCC. Card Token (04XXXXXX1234).CCT will pass first 6 & last 4 of the card# for 3rd Party Cards.
		CardToken: "601130XXXXXX1248",
		//This is a 40 character Alphanumeric field which is Unique generated by AurusPay® for each customer.
		CustomerIdentifier: " ",
		CardPresent: "N",
		PurchaserPresent: "N",
		EntrySource: "M",
		//Can hold following values “Y” – Keyed Entry AVS Flag to prompt CCT for ZIP. “C” – Prompt CCT For Skip Button NULL / “N” – Regular Auth.
		KeyedEntryAVSFlag: "N",
		KeyedEntryReasonCode: " ",
		GiftPurchaseAuthIndicator: "N",
		EcommerceIndicator: "N",
		EnableNFCReader: "Y",
		TransAmountDetails: {
			ServicesTotalAmount: " ",
			ProductTotalAmount: " ",
			TaxAmount: " ",
			Discount: " ",
			TransactionTotal: "1.10"
		},
		GiftCardList: " ",
		CardNumber: " ",
		//This is a 2 character Alphanumeric field which contains a Transaction Type Sale = 01 and
		TransactionType: "01",
		InvoiceNumber: " ",
		ReceiptNumber: " ",
		ReferenceNumber: " ",
		//This field identifies the POS IP address.
		POSIP: "10.93.248.223",
		//This field identifies the POS Client Name
		POSClientName: "MPOS-DEV10",
		POSVersion: " ",
		CustomerFirstName: "DISCOVER        ",
		CustomerLastName: "TEST CARD",
		WalletIdentifier: " ",
		DLIntellicheckFlag: " ",
		BillingAddress: {
			BillingName: " ",
			BillingAddressLine1: " ",
			BillingAddressLine2: " ",
			BillingAddressLine3: " ",
			BillingZip: " ",
			BillingCity: " ",
			BillingState: " ",
			BillingProvince: " ",
			BillingCountry: " ",
			BillingMobileNumber: " ",
			BillingOtherNumber: " ",
			BillingEmailId: " "
		},
		ShippingAddress: {
			ShippingName: " ",
			ShippingAddressLine1: " ",
			ShippingAddressLine2: " ",
			ShippingAddressLine3: " ",
			ShippingZip: " ",
			ShippingCity: " ",
			ShippingState: " ",
			ShippingProvince: " ",
			ShippingCountry: " ",
			ShippingMobileNumber: " ",
			ShippingOtherNumber: " ",
			ShippingEmailId: " ",
		},
		CheckInfo: {
			DriverLicenseEntryMode: " ",
			DriverLicenseData: " ",
			DriverLicenseState: " ",
			CheckEntryMode: " ",
			FullMICR: " ",
			RoutingNumber: " ",
			AccountNumber: " ",
			CheckNumber: " ",
			CheckType: " ",
			ConsumerDOB: " ",
			OtherIDType: " ",
			OtherIDEntryMode: " ",
			OtherIDData: " ",
			OtherIDState: " ",
			StateName: " "
		},
		PreSaleDate: " ",
		PreApprovalRefNumber: " ",
		GiftCardType: " ",
		GiftCardTypePassCode: " ",
		OrigAurusPayTicketNum: " ",
		OrigTransactionIdentifier: " ",
		ApprovalCode: " ",
		SubTransType: " ",
		ShowResponse: "1",
		ReferralNum: " ",
		EqualPayPlanNum: " ",
		CurrencyCode: "840",
		//Clerk identification number. can be up to 10 digits
	    ClerkID: "111",
		TransactionDate: " ",
		TransactionTime: " ",
		TipEligible: "0",
		AmountNoBar: "1",
		BatchNumber: " ",
		TenderTypeRestrictions: " ",
		SignatureFlag: "N",
		PLCCPaymentMethod: " ",
		Reserved1: " ",
		Reserved2: " "
 */

export default (voidType, total, ticket) => {
	let result = {};
    if(voidType == 'POST_VOID' ) {
       result = postVoid(total, ticket);
    } else {
       result = midVoid(total, ticket);
	}
	
	return result;
}

const postVoid = (total, ticket) => {

}

const midVoid = (total, ticket) => {
	TransRequestJson.TransRequest.KI = " ";
	TransRequestJson.TransRequest.KIType = " ";
	TransRequestJson.TransRequest.CardType = " ";
	TransRequestJson.TransRequest.CardToken = " ";
	TransRequestJson.TransRequest.TransAmountDetails.TransactionTotal = total;
	TransRequestJson.TransRequest.TransactionType = "06"
	TransRequestJson.TransRequest.OrigAurusPayTicketNum = ticket;
	return TransRequestJson

}

